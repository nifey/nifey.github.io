<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel on Nihaal</title>
    <link>https://nihaal.me/tags/kernel/</link>
    <description>Recent content in Kernel on Nihaal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Jan 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nihaal.me/tags/kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kernel defences</title>
      <link>https://nihaal.me/post/kernel_defences/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/kernel_defences/</guid>
      <description>Usually when an attacker exploits a vulnerability, the attack starts out as a Illegal memory access or Control flow hijack, which the attacker would use to write to sensitive memory locations or execute arbitrary code in supervisor mode, to try to increase privileges in the system.&#xA;Illegal memory accesses are memory accesses which the programmer didn&amp;rsquo;t intend to happen, which allows attackers to read or write to some memory locations. Illegal memory accesses can be classified on three aspects: Read or Write access Access to Arbitrary address or restricted address If it is a write, Arbitrary value or restricted value write Write accesses and arbitrary address/value writes are more serious bugs, as they allow attackers more control over where or what value they can write, making it easier to subvert execution.</description>
    </item>
    <item>
      <title>Fixing syzbot bugs</title>
      <link>https://nihaal.me/post/fixing_syzbot_bugs/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/fixing_syzbot_bugs/</guid>
      <description>Syzbot is an automated fuzzing infrastructure that uses Syzkaller to perform continuous fuzzing, primarily on the Linux kernel. Whenever it finds bugs, Syzbot reports it to the relevant mailing list. It also has a public dashboard where it lists all the open bugs that needs to be fixed.&#xA;Syzbot is quite effective in finding bugs in the kernel but due to the large number of bugs being found, many of them don&amp;rsquo;t get fixed in time.</description>
    </item>
    <item>
      <title>Coccinelle</title>
      <link>https://nihaal.me/post/coccinelle/</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/coccinelle/</guid>
      <description>Coccinelle is static analysis tool used for semantic pattern matching and automated transformation of C programs. It is written in OCaml. Unlike other pattern matching tools like grep which use regular expressions, Coccinelle understands C syntax and can find semantic code pattern in the source code and automatically transform them, irrespective of the name of identifiers, comments or formatting.&#xA;Coccinelle is intraprocedural, i.e. all its matching and transformation happens within functions.</description>
    </item>
    <item>
      <title>Kernel Sanitizers</title>
      <link>https://nihaal.me/post/kernel_sanitizers/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/kernel_sanitizers/</guid>
      <description>When fuzzing a program by feeding random inputs to it, we need a mechanism to tell when the program is doing unexpected things. Sanitizers help detect bugs in the program at runtime. They are usually used along with fuzzing to detect bugs in programs.&#xA;The two roles of sanitizers:&#xA;Detect incorrect program behaviour: like accessing memory that the program is not supposed to access Report incorrect behaviour: To be useful, the sanitizer needs to report useful information (like the stack trace and ) that makes it easier to understand and fix the bug.</description>
    </item>
    <item>
      <title>Linux kernel fuzzing</title>
      <link>https://nihaal.me/post/kernel_fuzzing/</link>
      <pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/kernel_fuzzing/</guid>
      <description>In this post, we&amp;rsquo;ll see how fuzzing is used for finding different types of bugs in the Linux kernel. This post consists of my notes taken from the talk by Andrey Konavalov about Linux fuzzing.&#xA;Operating systems kernels are complex. Testing kernels is of prime importance since any vulnerability in the kernel can lead to compromising the whole system.&#xA;Fuzzing is a dynamic program analysis technique, used to find bugs in software.</description>
    </item>
    <item>
      <title>Using static checkers on Linux Kernel</title>
      <link>https://nihaal.me/post/static_checker/</link>
      <pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/static_checker/</guid>
      <description>One of the hurdles in contributing to Linux kernel as a beginner is to find something to work on. If you are working as a kernel developer or are a part of a kernel mentorship program, this shouldn&amp;rsquo;t be a problem. But for others, the first step is to send a bunch of coding style fixes for warnings reported by checkpatch.&#xA;In addition to checkpatch, there are many other static analysis tools like sparse, coccinelle and smatch, used to analyse source code and find possible bugs.</description>
    </item>
    <item>
      <title>Creating sysfs files</title>
      <link>https://nihaal.me/post/creating_sysfs_files/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/creating_sysfs_files/</guid>
      <description>The kernel provides a few ways in which userspace programs can get information from the kernel space.&#xA;procfs: Used to get information about running processes debugfs: Used by kernel developers for debugging sysfs Sysfs is used for data that is not related to a particular process. It has information about hardware devices attached to the system and about drivers handling those devices.&#xA;Any file added to the sysfs becomes a part of the Linux Application Binary Interface (ABI).</description>
    </item>
    <item>
      <title>Looking inside /dev/null</title>
      <link>https://nihaal.me/post/dev_null/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/dev_null/</guid>
      <description>Accessing hardware devices like files An important role of the operating system is to allow the user applications to access hardware resources. It has to allow the user programs to use hardware while also ensuring that the applications have permissions to access it and don&amp;rsquo;t misuse them.&#xA;To simplify access to hardware, Unix, by design, exposes most of the hardware devices to userspace as device files, usually present under /dev directory.</description>
    </item>
    <item>
      <title>Creating debugfs files</title>
      <link>https://nihaal.me/post/creating_debugfs_files/</link>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/creating_debugfs_files/</guid>
      <description>debugfs debugfs is a pseudo-filesystem used for kernel debugging. It is usually mounted at /sys/kernel/debug. debugfs contains files that allow us to read debugging information.&#xA;By default, only the root user can cd into the /sys/kernel/debug directory.&#xA;To change it to allow the current user to cd into debugfs, we can remount it with uid set to the current user&amp;rsquo;s uid.&#xA;sudo umount /sys/kernel/debug sudo mount -t debugfs none /sys/kernel/debug -o uid=`echo $UID` cd /sys/kernel/debug Creating debugfs entries Creating debugfs files is similar to creating character device files.</description>
    </item>
    <item>
      <title>Misc character devices</title>
      <link>https://nihaal.me/post/misc_char_devices/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/misc_char_devices/</guid>
      <description>Character Devices, Major and Minor numbers Based on granularity of access, there are two classes of devices:&#xA;Character devices are accessed as a stream of bytes. Eg: Keyboards Block devices are accessed in blocks. For instance, hard disks transfer data in blocks of multiple bytes at a time. The kernel uses major and minor numbers to identify the attached hardware devices. Major number usually tells us the type of device. Minor numbers are used to differentiate two or more devices with the same major number.</description>
    </item>
    <item>
      <title>Eudyptula Challenge task 5</title>
      <link>https://nihaal.me/post/ec5/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/ec5/</guid>
      <description>In this post, I want to share what I learnt by doing task 5 of the Eudyptula challenge.&#xA;The Eudyptula Challenge is a set of 20 tasks designed to help people get started with Linux kernel development.&#xA;Task 5 of the challenge is to make a hello world kernel module get loaded automatically when a USB keyboard is plugged in.&#xA;Loadable kernel modules Linux kernel allows us to load modules to the kernel while the kernel is running.</description>
    </item>
    <item>
      <title>Hello world Linux Kernel Module</title>
      <link>https://nihaal.me/post/hello_world_lkm/</link>
      <pubDate>Fri, 31 Jan 2020 10:42:00 +0530</pubDate>
      <guid>https://nihaal.me/post/hello_world_lkm/</guid>
      <description>A Loadable Kernel Module (LKM) is a piece of code that can be loaded to a running kernel to add additional functionality to the kernel. The code that runs as a kernel module will be executed with kernel privileges. Most operating system kernels support kernel modules.&#xA;The advantage of using kernel modules is that it can be loaded to and unloaded from the kernel without the need to recompile or reboot the kernel.</description>
    </item>
  </channel>
</rss>
