<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nihaal</title>
    <link>https://nihaal.me/</link>
    <description>Recent content on Nihaal</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nihaal.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hi there üëã, I&#39;m Nihaal</title>
      <link>https://nihaal.me/about/</link>
      <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/about/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;I&amp;rsquo;m a PhD student focussing on Linux kernel security and Static analysis. I work with &lt;a href=&#34;https://cse.iitm.ac.in/~chester/&#34;&gt;Prof. Chester Rebeiro&lt;/a&gt; and &lt;a href=&#34;https://cse.iitm.ac.in/~madhu/&#34;&gt;Prof. Madhu Mutyam&lt;/a&gt;.&#xA;&lt;strong&gt;My current research&lt;/strong&gt; is on detecting memory leaks in the Linux kernel using static analysis. A list of memory leaks that we have detected and fixed can be found &lt;a href=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vREgEjH21e0OygLBQ8D20FkhNTDXCrZIDkwWykv21STmx16QlgFiveawTFcTD6Bs2R0pHVoeC2nzDrT/pubhtml&#34;&gt;here&lt;/a&gt;‚≠ê.&lt;/li&gt;&#xA;&lt;li&gt;I occasionally &lt;a href=&#34;https://nihaal.me&#34;&gt;write&lt;/a&gt; and collect interesting &lt;a href=&#34;https://github.com/nifey?tab=stars&#34;&gt;git repositories&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;publication&#34;&gt;Publication&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/3673038.3673058&#34;&gt;Selective Memory Compression for GPU Memory Oversubscription Management&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Abdun Nihaal, Madhu Mutyam&lt;/p&gt;&#xA;&lt;p&gt;Published at International Conference on Parallel Processing (ICPP 24) with all three reproducibility badges (&lt;a href=&#34;https://zenodo.org/records/12917001&#34;&gt;Artifact&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes: Text processing and Regular expressions in Python</title>
      <link>https://nihaal.me/post/python_text_processing/</link>
      <pubDate>Thu, 24 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/python_text_processing/</guid>
      <description>&lt;p&gt;In this post, we will learn by example, text processing and regular expression basics in Python.&#xA;We will also learn how to use inbuilt and external packages, to take command line arguments and to read data from files.&lt;/p&gt;&#xA;&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;&#xA;&lt;h3 id=&#34;execute-python-scripts-like-executable&#34;&gt;Execute python scripts like executable&lt;/h3&gt;&#xA;&lt;p&gt;Normally, we can execute python scripts by running &lt;code&gt;python script.py&lt;/code&gt;. If we want to execute python scripts like an executable on the terminal we can add the following line as the first line of the script.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes on Sed</title>
      <link>https://nihaal.me/post/sed/</link>
      <pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/sed/</guid>
      <description>&lt;h1 id=&#34;sed&#34;&gt;Sed&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Stream EDitor, UNIX utility&lt;/li&gt;&#xA;&lt;li&gt;Based on ed (line oriented text editor)&lt;/li&gt;&#xA;&lt;li&gt;Used commonly for &lt;strong&gt;find and replace&lt;/strong&gt; based on Regular expressions&lt;/li&gt;&#xA;&lt;li&gt;Useful for processing and transforming logs&lt;/li&gt;&#xA;&lt;li&gt;Can also be used inside vim for find and replace&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;basic-usage&#34;&gt;Basic usage&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat file | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/hello/world/&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/hello/world/&amp;#39;&lt;/span&gt; file&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed file -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/hello/world/&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/hello/world/&amp;#39;&lt;/span&gt; -i file&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Inline (will replace in the file)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat file | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/REGEX/d&amp;#39;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete lines matching a regular expression&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;regular-expression-syntax&#34;&gt;Regular expression syntax&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Language to represent string patterns&lt;/li&gt;&#xA;&lt;li&gt;Useful beyond sed (eg: grepping through source code)&lt;/li&gt;&#xA;&lt;li&gt;Basic regex: &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;Specify characters to match&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&amp;lsquo;a&amp;rsquo;&lt;/strong&gt; matches character a&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;[a-z]&lt;/strong&gt; matches lowercase alphabets&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;[a-zA-Z0-9]&lt;/strong&gt; matches alphabets and numbers&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;[abc]&lt;/strong&gt; matches characters a b c&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;[^abc]&lt;/strong&gt; matches anything except characters a b c&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Specify count of characters to match&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;*&lt;/strong&gt; -&amp;gt; Zero or more instances&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;\+&lt;/strong&gt; -&amp;gt; One or more instances&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;?&lt;/strong&gt; -&amp;gt; Zero or one instances&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;{8}&lt;/strong&gt; -&amp;gt; Matches 8 instances&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;{1,3}&lt;/strong&gt; -&amp;gt; Matches 1 to 3 instances&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;{3,}&lt;/strong&gt; -&amp;gt; Matches 3 or more instances&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Special characters&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;.&lt;/strong&gt; -&amp;gt; Matches any character&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;^&lt;/strong&gt; -&amp;gt; Matches the beginning of the line&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;$&lt;/strong&gt; -&amp;gt; Matches the end of the line&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Combining regex&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&amp;lsquo;regex1regex2&amp;rsquo;&lt;/strong&gt; matches regex1 first then regex2 (Concatenation)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&amp;lsquo;regex1\|regex2&amp;rsquo;&lt;/strong&gt; matches either regex1 or regex2 (Choice)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Backreferences&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Used for selecting a part of the matched string to be used for transforming text&lt;/li&gt;&#xA;&lt;li&gt;Enclose parts of the regex with \( .. \) parenthesis&lt;/li&gt;&#xA;&lt;li&gt;Use the corresponding matches in replacement using \1, \2, etc to match the first, second backreference respectively.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;sed-command-syntax&#34;&gt;Sed command syntax&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PATTERN_SPACE { commands; ...}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pattern-space&#34;&gt;Pattern space&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Selects (filters) the lines that we want to process&lt;/li&gt;&#xA;&lt;li&gt;Can be specified as line number ranges or regular expressions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7d&amp;#39;&lt;/span&gt; file&#x9;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete line number 7&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1,10d&amp;#39;&lt;/span&gt; file&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete line number 1 to 10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/REGEX/d&amp;#39;&lt;/span&gt; file&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete lines matching REGEX&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3,/REGEX/d&amp;#39;&lt;/span&gt; file&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete from 3rd line to a line matching REGEX&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/REGEX1/,/REGEX2/d&amp;#39;&lt;/span&gt; file&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete lines starting from a line matching REGEX1 to a line matching REGEX2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/REGEX1/,$d&amp;#39;&lt;/span&gt; file&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete lines starting from a line matching REGEX1 till end of file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/REGEX1/ {/REGEX2/d}&amp;#39;&lt;/span&gt; file &lt;span style=&#34;color:#75715e&#34;&gt;# Delete lines matching both REGEX1 and REGEX2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;substitute-command-for-find-and-replace&#34;&gt;Substitute command for find and replace&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Finds patterns matching REGEX1 and replaces with REGEX2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat file | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/REGEX1/REGEX2/[flags]&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Optional flags&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# i to ignore case&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# g to replace more than one instance of the pattern in a line&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# c to confirm every replacement (Only available in vim mode)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;other-commands&#34;&gt;Other commands&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete command&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat file | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/REGEX/d&amp;#39;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete lines matching a regular expression&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Print command&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat file | sed -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10p&amp;#39;&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Print 10th line&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat file | sed -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/REGEX/p&amp;#39;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Grep&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Transliterate command&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat file | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y/abc/ABC/&amp;#39;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# Transliterate (a-&amp;gt;A, b-&amp;gt;B, c-&amp;gt;C)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more information, execute &lt;code&gt;info sed&lt;/code&gt; on the shell to get a manual on sed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kernel defences</title>
      <link>https://nihaal.me/post/kernel_defences/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/kernel_defences/</guid>
      <description>&lt;p&gt;Usually when an attacker exploits a vulnerability, the attack starts out as a &lt;em&gt;Illegal memory access&lt;/em&gt; or &lt;em&gt;Control flow hijack&lt;/em&gt;, which the attacker would use to write to sensitive memory locations or execute arbitrary code in supervisor mode, to try to increase privileges in the system.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;Illegal memory accesses&lt;/em&gt; are memory accesses which the programmer didn&amp;rsquo;t intend to happen, which allows attackers to read or write to some memory locations.&#xA;Illegal memory accesses can be classified on three aspects:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Read or Write access&lt;/li&gt;&#xA;&lt;li&gt;Access to Arbitrary address or restricted address&lt;/li&gt;&#xA;&lt;li&gt;If it is a write, Arbitrary value or restricted value write&#xA;Write accesses and arbitrary address/value writes are more serious bugs, as they allow attackers more control over where or what value they can write, making it easier to subvert execution.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;In a control flow hijack, the vulnerability provides a way to divert execution into an attacker controlled path.&#xA;For instance, when an attacker controls the value of a function pointer, she can hijack control flow when that function is dereferenced.&#xA;Control flow hijack can happen either on the forward edge (when a function is called) or on the backward edge (when a function returns).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Despite having vulnerabilities that allow illegal writes or control flow hijack, the kernel has a few defence mechanisms in place to make&#xA;it difficult to convert a vulnerability into a useful attack.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fixing syzbot bugs</title>
      <link>https://nihaal.me/post/fixing_syzbot_bugs/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/fixing_syzbot_bugs/</guid>
      <description>&lt;p&gt;Syzbot is an automated fuzzing infrastructure that uses Syzkaller to perform continuous fuzzing, primarily on the Linux kernel.&#xA;Whenever it finds bugs, Syzbot reports it to the relevant mailing list.&#xA;It also has a &lt;a href=&#34;https://syzkaller.appspot.com/&#34;&gt;public dashboard&lt;/a&gt; where it lists all the open bugs that needs to be fixed.&lt;/p&gt;&#xA;&lt;p&gt;Syzbot is quite effective in finding bugs in the kernel but due to the large number of bugs being found, many of them don&amp;rsquo;t get fixed in time. And so, we can help fix those bugs.&#xA;In this post, I&amp;rsquo;ll share the general approaches and steps in fixing Syzbot bugs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Coccinelle</title>
      <link>https://nihaal.me/post/coccinelle/</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/coccinelle/</guid>
      <description>&lt;p&gt;Coccinelle is static analysis tool used for semantic pattern matching and automated transformation of C programs.&#xA;It is written in OCaml.&#xA;Unlike other pattern matching tools like grep which use regular expressions, Coccinelle understands C syntax and&#xA;can find semantic code pattern in the source code and automatically transform them, irrespective of the name of identifiers, comments or formatting.&lt;/p&gt;&#xA;&lt;p&gt;Coccinelle is &lt;em&gt;intraprocedural&lt;/em&gt;, i.e. all its matching and transformation happens within functions.&#xA;Coccinelle also does not expand C macros.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Finding bugs with Syzkaller</title>
      <link>https://nihaal.me/post/syzkaller/</link>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/syzkaller/</guid>
      <description>&lt;p&gt;Syzkaller is an unsupervised, grammar based, coverage guided fuzzer used for fuzzing operating system kernels.&#xA;It primarily performs system call fuzzing, but it can also be used for fuzzing USB and network packets.&#xA;It is currently used for continuous fuzzing of Linux, Android and other BSD kernels.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;Automated&lt;/em&gt;:&#xA;Syzkaller can automatically restart crashed virtual machines and also create a reproducer for the crashes.&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Coverage guided&lt;/em&gt;:&#xA;Syzkaller gets coverage information using the KCOV infrastructure, which is built into the kernel.&#xA;After executing a mutated program from the corpus, Syzkaller checks if the program has increased the coverage, i.e. it checks whether any&#xA;new code paths in the kernel have been reached during the execution of the program. If so, it adds the program to the corpus for further mutation.&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Grammar based&lt;/em&gt;:&#xA;Syzkaller understands the structure and API of system calls.&#xA;It uses system calls descriptions written in  &lt;em&gt;&lt;a href=&#34;https://github.com/google/syzkaller/blob/master/docs/syscall_descriptions_syntax.md&#34;&gt;Syzlang&lt;/a&gt;&lt;/em&gt; to generate valid system calls with randomized values in arguments.&#xA;This allows it to execute deeper code paths that would not be possible with blind random fuzzing.&#xA;Syzlang can describe structs that are passed as arguments to syscalls, the possible values for flags and resources (like file descriptors) which are passed across multiple syscalls and have to be created and destroyed using specific system calls.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;syzkaller-overview&#34;&gt;Syzkaller overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/syzkaller/blob/master/docs/process_structure.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to do research?</title>
      <link>https://nihaal.me/post/how_to_research/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/how_to_research/</guid>
      <description>&lt;p&gt;Disclaimer: I&amp;rsquo;m no expert in this. This post is just to collect all my thoughts and lessons learnt from random talks and blogs, about research.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is research?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Research is producing new knowledge.&#xA;The aim of research is to do something &lt;strong&gt;novel&lt;/strong&gt; (new) and &lt;strong&gt;useful&lt;/strong&gt;.&#xA;The purpose of literature survey is to ensure that our idea is new and has not been proposed before.&#xA;And the purpose of evaluations is to show that our idea or technique is useful.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kernel Sanitizers</title>
      <link>https://nihaal.me/post/kernel_sanitizers/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/kernel_sanitizers/</guid>
      <description>&lt;p&gt;When fuzzing a program by feeding random inputs to it, we need a mechanism to tell when the program is doing unexpected things.&#xA;Sanitizers help detect bugs in the program at runtime.&#xA;They are usually used along with fuzzing to detect bugs in programs.&lt;/p&gt;&#xA;&lt;p&gt;The two roles of sanitizers:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;Detect incorrect program behaviour&lt;/em&gt;: like accessing memory that the program is not supposed to access&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Report incorrect behaviour&lt;/em&gt;: To be useful, the sanitizer needs to report useful information (like the stack trace and ) that makes it easier to understand and fix the bug.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The Linux kernel supports a number of sanitizers, each focussing on a different class of bugs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux kernel fuzzing</title>
      <link>https://nihaal.me/post/kernel_fuzzing/</link>
      <pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/kernel_fuzzing/</guid>
      <description>&lt;p&gt;In this post, we&amp;rsquo;ll see how fuzzing is used for finding different types of bugs in the Linux kernel.&#xA;This post consists of my notes taken from &lt;a href=&#34;https://www.linuxfoundation.org/webinars/fuzzing-linux-kernel?hsLang=en&#34;&gt;the talk by Andrey Konavalov about Linux fuzzing&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Operating systems kernels are complex.&#xA;Testing kernels is of prime importance since any vulnerability in the kernel can lead to compromising the whole system.&lt;/p&gt;&#xA;&lt;p&gt;Fuzzing is a dynamic program analysis technique, used to find bugs in software.&#xA;It works by feeding random input to programs until it crashes.&#xA;In recent times, Fuzzing has been effective in finding bugs, especially the ones that are hard to detect manually.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TLB;DR Reversing TLBs with TLB desynchronization</title>
      <link>https://nihaal.me/post/paper_tlbdr/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/paper_tlbdr/</guid>
      <description>&lt;p&gt;Yesterday, I read an interesting research paper about reverse engineering TLBs using TLB desynchronization.&#xA;In this post, I&amp;rsquo;ll write briefly about the key ideas and what I found very interesting in the paper.&lt;/p&gt;&#xA;&lt;p&gt;You can find the paper here:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/conference/usenixsecurity22/presentation/tatar&#34;&gt;&lt;strong&gt;TLB;DR: Enhancing TLB-based Attacks with TLB Desynchronized Reverse Engineering&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/vusec/tlbdr&#34;&gt;TLB;DR Source code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reverse-engineering-cpu-internals&#34;&gt;Reverse engineering CPU internals&lt;/h2&gt;&#xA;&lt;p&gt;In the subfield of hardware security that focuses on communicating (covert channels) or leaking (side channels) critical information using timing or storage channels, accurate information about the CPU internals helps create more efficient and reliable channels.&#xA;Information about the size, associativity, set mapping, etc. of caches and TLBs allow the attacker to fine tune their attacks.&#xA;However, most CPU vendors don&amp;rsquo;t disclose such information in detail, and so, attackers resort to reverse engineering these microarchitectural details.&#xA;Reverse engineering hardware structures is usually performed by observing timing differences, which can have a lot of noise.&#xA;In the paper, TLB;DR, the authors propose a new method for reverse engineering TLBs with high accuracy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using static checkers on Linux Kernel</title>
      <link>https://nihaal.me/post/static_checker/</link>
      <pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/static_checker/</guid>
      <description>&lt;p&gt;One of the hurdles in contributing to Linux kernel as a beginner is to find something to work on.&#xA;If you are working as a kernel developer or are a part of a kernel mentorship program, this shouldn&amp;rsquo;t be a problem. But for others, the first step is to send a bunch of coding style fixes for warnings reported by checkpatch.&lt;/p&gt;&#xA;&lt;p&gt;In addition to checkpatch, there are many other static analysis tools like sparse, coccinelle and smatch, used to analyse source code and find possible bugs.&#xA;In this post, I&amp;rsquo;ll show how to use some of these tools to find issues to fix.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hardware compression algorithms</title>
      <link>https://nihaal.me/post/hardware_compression_algorithms/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/hardware_compression_algorithms/</guid>
      <description>&lt;p&gt;Compression is a common technique that allows us to reduce the size of data.&#xA;We use it when we store or send files as &lt;em&gt;zip&lt;/em&gt;, &lt;em&gt;7z&lt;/em&gt; or &lt;em&gt;rar&lt;/em&gt; archives.&#xA;It helps reduce the space occupied by files in the filesystem and also to save bandwidth while transferring over a network.&lt;/p&gt;&#xA;&lt;p&gt;In general, compression algorithms try to encode &lt;strong&gt;redundancy or regularity in data&lt;/strong&gt; with lesser bits.&lt;/p&gt;&#xA;&lt;p&gt;There are many different software compression algorithms available.&#xA;Lempel-Ziv family of algorithms, used in tools like &lt;em&gt;zip&lt;/em&gt; and &lt;em&gt;7z&lt;/em&gt;, works by replacing repeated chunks of data with a pointer to an earlier occurrence. This avoids repeating the same chunks of data over and over again.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FOSSHack 2021</title>
      <link>https://nihaal.me/post/fosshack_2021/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/fosshack_2021/</guid>
      <description>&lt;h2 id=&#34;fosshack-2021&#34;&gt;FOSSHack 2021&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://fossunited.org/fosshack/2021&#34;&gt;FOSSHack 2021&lt;/a&gt; is a remote hackathon, organized by &lt;a href=&#34;https://fossunited.org/&#34;&gt;FOSSUnited&lt;/a&gt;, that happened on 13-14 November.&#xA;FOSSUnited is a non-profit foundation that seeks to foster more FOSS projects and contributors from India and this hackathon is one such initiative.&lt;/p&gt;&#xA;&lt;p&gt;The rules were simple: &lt;em&gt;Build a FOSS project or Work on existing FOSS project during the weekend.&lt;/em&gt;&#xA;The projects would be judged based on factors like technical complexity, completeness and utility.&lt;/p&gt;&#xA;&lt;p&gt;I came to know about FOSSHack from the &lt;a href=&#34;https://www.freelists.org/post/ilugc/Fwd-BangPypers-Invitation-to-FOSS-Hack-2021&#34;&gt;ILUGC mailing list&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Publishing packages to PyPI</title>
      <link>https://nihaal.me/post/publish_to_pypi/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/publish_to_pypi/</guid>
      <description>&lt;p&gt;The usability of a programming language depends on many factors and one of them is the availability of good libraries to build on.&#xA;When libraries are available, we also need a way to search and download libraries with ease.&#xA;Most modern langauges maintain some form of index to make dependency management easier. Examples include &lt;a href=&#34;https://crates.io/&#34;&gt;Crates.io&lt;/a&gt; for Rust and &lt;a href=&#34;https://pypi.org/&#34;&gt;PyPI&lt;/a&gt; for Python.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org&#34;&gt;Python Package Index (PyPI)&lt;/a&gt; is an index and repository of Python packages.&#xA;Publishing your Python library or tool on PyPI allows any user to download it with &lt;strong&gt;pip&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating sysfs files</title>
      <link>https://nihaal.me/post/creating_sysfs_files/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/creating_sysfs_files/</guid>
      <description>&lt;p&gt;The kernel provides a few ways in which userspace programs can get information from the kernel space.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;procfs: Used to get information about running processes&lt;/li&gt;&#xA;&lt;li&gt;debugfs: Used by kernel developers for debugging&lt;/li&gt;&#xA;&lt;li&gt;sysfs&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Sysfs is used for data that is not related to a particular process.&#xA;It has information about hardware devices attached to the system and about drivers handling those devices.&lt;/p&gt;&#xA;&lt;p&gt;Any file added to the sysfs becomes a part of the Linux Application Binary Interface (ABI).&#xA;This means that applications might start using this file and now it has to be supported (like) forever,&#xA;because kernel developers care about &lt;em&gt;not breaking userspace&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Looking inside /dev/null</title>
      <link>https://nihaal.me/post/dev_null/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/dev_null/</guid>
      <description>&lt;h2 id=&#34;accessing-hardware-devices-like-files&#34;&gt;Accessing hardware devices like files&lt;/h2&gt;&#xA;&lt;p&gt;An important role of the operating system is to allow the user applications to access hardware resources. It has to allow the user programs to use hardware while also ensuring that the applications have permissions to access it and don&amp;rsquo;t misuse them.&lt;/p&gt;&#xA;&lt;p&gt;To simplify access to hardware, Unix, by design, exposes most of the hardware devices to userspace as &lt;em&gt;device files&lt;/em&gt;, usually present under /dev directory.&#xA;Applications can then access the hardware by invoking system calls like read or write on the device files associated with that device.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating debugfs files</title>
      <link>https://nihaal.me/post/creating_debugfs_files/</link>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/creating_debugfs_files/</guid>
      <description>&lt;h2 id=&#34;debugfs&#34;&gt;debugfs&lt;/h2&gt;&#xA;&lt;p&gt;debugfs is a pseudo-filesystem used for kernel debugging.&#xA;It is usually mounted at /sys/kernel/debug.&#xA;debugfs contains files that allow us to read debugging information.&lt;/p&gt;&#xA;&lt;p&gt;By default, only the root user can &lt;em&gt;cd&lt;/em&gt; into the  /sys/kernel/debug directory.&lt;/p&gt;&#xA;&lt;p&gt;To change it to allow the current user to &lt;em&gt;cd&lt;/em&gt; into debugfs, we can remount it with &lt;em&gt;uid&lt;/em&gt; set to the current user&amp;rsquo;s &lt;em&gt;uid&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo umount /sys/kernel/debug&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mount -t debugfs none /sys/kernel/debug -o uid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;echo $UID&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /sys/kernel/debug&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;creating-debugfs-entries&#34;&gt;Creating debugfs entries&lt;/h2&gt;&#xA;&lt;p&gt;Creating debugfs files is similar to creating character device files.&#xA;It is done by defining functions and storing pointers to these functions in a &lt;em&gt;file_operations&lt;/em&gt; structure which is then passed to the kernel.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Misc character devices</title>
      <link>https://nihaal.me/post/misc_char_devices/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/misc_char_devices/</guid>
      <description>&lt;h2 id=&#34;character-devices-major-and-minor-numbers&#34;&gt;Character Devices, Major and Minor numbers&lt;/h2&gt;&#xA;&lt;p&gt;Based on granularity of access, there are two classes of devices:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;em&gt;Character devices&lt;/em&gt; are accessed as a stream of bytes. Eg: Keyboards&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Block devices&lt;/em&gt; are accessed in blocks. For instance, hard disks transfer data in blocks of multiple bytes at a time.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The kernel uses major and minor numbers to identify the attached hardware devices.&#xA;Major number usually tells us the type of device.&#xA;Minor numbers are used to differentiate two or more devices with the same major number.&#xA;Some minor numbers are reserved.&#xA;The driver writer can choose to use a specific minor number for a device by reserving it, or allow the kernel to assign any free minor number.&#xA;The meaning of major numbers and the list of reserved minor numbers can be found in &lt;a href=&#34;https://elixir.bootlin.com/linux/latest/source/Documentation/admin-guide/devices.txt&#34;&gt;Documentation/admin-guide/devices.txt&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Updating vulnerable Python dependencies</title>
      <link>https://nihaal.me/post/updating_vulnerable_python_dependencies/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/updating_vulnerable_python_dependencies/</guid>
      <description>&lt;h2 id=&#34;finding-vulnerable-dependencies&#34;&gt;Finding vulnerable dependencies&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pyupio/safety-db&#34;&gt;Safety-db&lt;/a&gt; is a database that keeps track of vulnerable python packages and version information.&#xA;It is updated once a month.&#xA;They also provide a tool called safety, that checks if the installed packages or packages in requirements.txt&#xA;are identified as vulnerable using the safety-db.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Install safety&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install safety&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;Use safety to check all packages in the current virtual enviroment&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;safety check&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;Use safety to only check the dependencies listed in requirements.txt file&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;safety check -r requirements.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Safety shows a list of python packages that have a known vulnerability.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Eudyptula Challenge task 5</title>
      <link>https://nihaal.me/post/ec5/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://nihaal.me/post/ec5/</guid>
      <description>&lt;p&gt;In this post, I want to share what I learnt by doing task 5 of the Eudyptula challenge.&lt;/p&gt;&#xA;&lt;p&gt;The Eudyptula Challenge is a set of 20 tasks designed to&#xA;help people get started with Linux kernel development.&lt;/p&gt;&#xA;&lt;p&gt;Task 5 of the challenge is to make a &lt;a href=&#34;https://nihaal.me/post/hello%5Fworld%5Flkm/&#34;&gt;hello world kernel module&lt;/a&gt; get loaded&#xA;automatically when a USB keyboard is plugged in.&lt;/p&gt;&#xA;&lt;h2 id=&#34;loadable-kernel-modules&#34;&gt;Loadable kernel modules&lt;/h2&gt;&#xA;&lt;p&gt;Linux kernel allows us to load modules to the kernel while the kernel is running.&#xA;Once loaded, the module&amp;rsquo;s code executes in kernel mode and can access all the kernel&amp;rsquo;s global symbols.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Backing up files with RSync</title>
      <link>https://nihaal.me/post/rsync/</link>
      <pubDate>Sat, 19 Jun 2021 11:16:00 +0530</pubDate>
      <guid>https://nihaal.me/post/rsync/</guid>
      <description>&lt;h2 id=&#34;you-need-a-backup&#34;&gt;You need a backup&lt;/h2&gt;&#xA;&lt;p&gt;When was the last time you took a backup of your files?&#xA;Thanks to technology, today, we can store thousands of photos and videos in a single pen drive.&#xA;Digital files are easy to store, but they are also easy to lose.&#xA;And that is why we all need to take regular backup of our files.&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-2-1-backup-strategy&#34;&gt;3-2-1 Backup Strategy&lt;/h3&gt;&#xA;&lt;p&gt;3-2-1 Backup strategy is a general rule of thumb that says it is better to have atleast 3 copies of our files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello world Linux Kernel Module</title>
      <link>https://nihaal.me/post/hello_world_lkm/</link>
      <pubDate>Fri, 31 Jan 2020 10:42:00 +0530</pubDate>
      <guid>https://nihaal.me/post/hello_world_lkm/</guid>
      <description>&lt;p&gt;A Loadable Kernel Module (LKM) is a piece of code that can be loaded to a running kernel to add additional functionality to the kernel.&#xA;The code that runs as a kernel module will be executed with kernel privileges. Most operating system kernels support kernel modules.&lt;/p&gt;&#xA;&lt;p&gt;The advantage of using kernel modules is that it can be loaded to and unloaded from the kernel without the need to recompile or reboot the kernel.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Smart India Hackathon 2018</title>
      <link>https://nihaal.me/post/2018-09-15-smart-india-hackathon-2018/</link>
      <pubDate>Sat, 15 Sep 2018 17:50:37 +0000</pubDate>
      <guid>https://nihaal.me/post/2018-09-15-smart-india-hackathon-2018/</guid>
      <description>&lt;h2 id=&#34;smart-india-hackathon-2018&#34;&gt;Smart India Hackathon 2018&lt;/h2&gt;&#xA;&lt;p&gt;In January this year, I along with my friends got an opportunity to participate in the Smart India Hackathon 2018. In this blog post, I want to share my experience of attending this hackathon and the lessons we learnt.&lt;/p&gt;&#xA;&lt;p&gt;Smart India Hackathon is a 36-hour hackathon organized by the government of India. It is an opportunity for students to use their innovative ideas to solve real-world problems. The Indian government started conducting this hackathon from 2017 and this is the second hackathon.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hacktoberfest and ILUGC meetup</title>
      <link>https://nihaal.me/post/2017-11-12-hacktoberfest-and-ilugc/</link>
      <pubDate>Sun, 12 Nov 2017 13:28:37 +0000</pubDate>
      <guid>https://nihaal.me/post/2017-11-12-hacktoberfest-and-ilugc/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../../assets/hacktoberfest/hacktoberfest.png&#34; alt=&#34;Hacktoberfest&#34; title=&#34;Hactoberfest&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this post, I want to share what I did for &lt;a href=&#34;https://hacktoberfest.digitalocean.com&#34;&gt;Hacktoberfest&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Hacktoberfest is a month-long program to motivate people to contribute to open source software. All you have to do is give 4 pull requests to any public repository on Github. The reward is a cool t-shirt and Github stickers. These contributions should be made in the month of October to be counted for hacktoberfest.&lt;/p&gt;&#xA;&lt;p&gt;I searched for a project I can contribute to. I came across repositories that are made for hacktoberfest. People just add their name to some file and give a pull request. I think such repositories are spoiling the spirit of hacktoberfest. The only good thing is that people who are completely new to git and github can practice using git on these repos.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lost in the woods: My entry for JS13Kgames</title>
      <link>https://nihaal.me/post/2017-10-20-lost-in-the-woods-my-entry-for-js13kgames/</link>
      <pubDate>Fri, 20 Oct 2017 20:52:38 +0000</pubDate>
      <guid>https://nihaal.me/post/2017-10-20-lost-in-the-woods-my-entry-for-js13kgames/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../../assets/js13k/js13kfinal.png&#34; alt=&#34;Lost in the woods&#34; title=&#34;Lost in the woods&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this blog post, I want to share my experience participating in the &lt;a href=&#34;http://js13kgames.com&#34;&gt;JS13Kgames&lt;/a&gt; game jam.&lt;/p&gt;&#xA;&lt;p&gt;About a month ago, I got a chance to participate in the JS13Kgames. JS13kgames is an HTML5 game development competition that happens from 13th August till 13th September. The goal of this competition is to make a game in under 13 kilobytes including all the game assets. For this game jam, I made a two-player game called &amp;ldquo;Lost in the woods&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My experience at MozillaTN meetup 2017</title>
      <link>https://nihaal.me/post/2017-02-23-my-experience-at-mozillatn-meetup/</link>
      <pubDate>Thu, 23 Feb 2017 20:51:38 +0000</pubDate>
      <guid>https://nihaal.me/post/2017-02-23-my-experience-at-mozillatn-meetup/</guid>
      <description>&lt;p&gt;In this blog post, I am writing about my experience participating in the MozillaTN community meetup held at Coimbatore this January.&lt;/p&gt;&#xA;&lt;p&gt;Mozilla is a global community of passionate people working to protect the web as an open resource. I was always interested in Mozilla for 2 reasons. First, Mozilla is one of the pioneers of the &lt;strong&gt;open source&lt;/strong&gt; movement. As far as I remember, Mozilla Firefox was the first open source software I have ever used. Second, Mozilla and Mozillians believe that &lt;strong&gt;the Web is for everyone&lt;/strong&gt;. They care about privacy and web literacy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My goals for the next 6 months</title>
      <link>https://nihaal.me/post/2016-12-17-my-goals-for-the-next-6-months/</link>
      <pubDate>Sat, 17 Dec 2016 20:52:38 +0000</pubDate>
      <guid>https://nihaal.me/post/2016-12-17-my-goals-for-the-next-6-months/</guid>
      <description>&lt;p&gt;In this post, I am sharing my goals for the next 6 months.&lt;/p&gt;&#xA;&lt;p&gt;The reason I&amp;rsquo;m doing this is to keep myself motivated and also to let other mozillians know what I&amp;rsquo;m up to.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Learn Rust. Learning more about the rust language is my first priority. In this 6 months I want to learn about:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Unit Testing&lt;/li&gt;&#xA;&lt;li&gt;Networking in rust&lt;/li&gt;&#xA;&lt;li&gt;basics of functional programming&lt;/li&gt;&#xA;&lt;li&gt;If possible, using threads in rust&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Contribute to some simple, open source rust projects.&lt;/li&gt;&#xA;&lt;li&gt;Learn Deep learning and contribute to DeepRust crate.&lt;/li&gt;&#xA;&lt;li&gt;Contribute to Servo, the Rust browser engine. I plan to first try out the servo engine and find ways to contribute to it.&lt;/li&gt;&#xA;&lt;li&gt;Write tutorials. I am going to write beginner level tutorials to help those who are just starting out.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;A few days back I came to know about the MozillaTN meetup which is going to happen at Coimbatore this January. I haven&amp;rsquo;t met any mozillians yet. So I am super excited about this meetup. I am looking forward to attending this meetup. I wish to meet some rust developers and do something awesome with them. :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello World: Getting started with Rust</title>
      <link>https://nihaal.me/post/2016-11-15-hello-world-getting-started-with-rust/</link>
      <pubDate>Tue, 15 Nov 2016 17:50:37 +0000</pubDate>
      <guid>https://nihaal.me/post/2016-11-15-hello-world-getting-started-with-rust/</guid>
      <description>&lt;h2 id=&#34;the-rust-programming-language&#34;&gt;The Rust programming language&lt;/h2&gt;&#xA;&lt;p&gt;Rust is a system programming language that focusses on three aspects: Speed, Safety and Concurrency. It is being developed by an active community of programmers. Its development is officially sponsored by Mozilla.&lt;/p&gt;&#xA;&lt;h3 id=&#34;installing-rust&#34;&gt;Installing rust&lt;/h3&gt;&#xA;&lt;p&gt;First, we have to install the rust compiler which is called &lt;strong&gt;rustc&lt;/strong&gt; and &lt;strong&gt;cargo&lt;/strong&gt; ,rust&amp;rsquo;s package manager. I recommend installing rustc and cargo using rustup. Why rustup? Before answering that I have to mention that rustc comes in three versions : Stable , Beta and Nightly.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
